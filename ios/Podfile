source 'https://github.com/CocoaPods/Specs.git' 
# source 'https://cdn.cocoapods.org/'
source 'https://github.com/SumSubstance/Specs.git'

require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")

platform :ios, '13.0'
prepare_react_native_project!
# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
# flipper_config = FlipperConfiguration.enabled(["Debug", "Debug Testnet"])
linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

project 'wallet',
        'Debug Testnet' => :debug,
        'Release Testnet' => :release

target 'WonderPushNotificationServiceExtension' do
  platform :ios, '10.0'

  # Pods for WonderPushNotificationServiceExtension
  pod 'WonderPushExtension', '~> 4.0'
end

target 'WhalesApp' do
  use_expo_modules!
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    :fabric_enabled => false,
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    # :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # pod 'OpenSSL-Universal', :modular_headers => true, :configurations => ['Release', 'Release Testnet', 'Debug', 'Debug Testnet']

  post_install do |installer|
    react_native_post_install(
      installer,
      :mac_catalyst_enabled => false
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)

    # Workaround `Cycle inside FBReactNativeSpec` error for react-native 0.64
    # Reference: https://github.com/software-mansion/react-native-screens/issues/842#issuecomment-812543933
    installer.pods_project.targets.each do |target|

      if (target.name&.eql?('FBReactNativeSpec'))
        target.build_phases.each do |build_phase|
          if (build_phase.respond_to?(:name) && build_phase.name.eql?('[CP-User] Generate Specs'))
            target.build_phases.move(build_phase, 0)
          end
        end
      end

      # Workaround for XCode 14.3
      if (target.name&.eql?('React-Codegen'))
        target.build_configurations.each do |config|
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.4'
        end
      end

      # Workaround for Flipper on XCode 15.3
      if target.name == 'Flipper'
        file_path = 'Pods/Flipper/xplat/Flipper/FlipperTransportTypes.h'
        if (File.exist?(file_path))
          contents = File.read(file_path)
          if (!contents.include?('#include <functional>'))
            mod_content = contents.gsub("#pragma once", "#pragma once\n#include <functional>")
            File.chmod(0755, file_path)
            File.open(file_path, 'w') do |file|
              file.puts(mod_content)
            end
          end
        end
      end

    end

    # Strip bitcode from hermes framework
    bitcode_strip_path = `xcrun -find bitcode_strip`.chomp
    def strip_bitcode_from_framework(bitcode_strip_path, framework_path)
      return unless File.exist?(framework_path)
      command = "#{bitcode_strip_path} \"#{framework_path}\" -r -o \"#{framework_path}\""
      puts "Stripping bitcode: #{command}"
      system(command)
    end
    
    # For both local builds and Xcode Cloud builds
    # Check built products directory first
    Dir.glob("#{installer.sandbox.root}/../build/**/*.app/Frameworks/hermes.framework/hermes").each do |hermes_path|
      strip_bitcode_from_framework(bitcode_strip_path, hermes_path)
    end
    
    # Check derived data directory for Xcode Cloud builds
    derived_data = ENV['DERIVED_DATA_PATH'] || ENV['OBJROOT']
    if derived_data
      Dir.glob("#{derived_data}/**/*.app/Frameworks/hermes.framework/hermes").each do |hermes_path|
        strip_bitcode_from_framework(bitcode_strip_path, hermes_path)
      end
    end
    
    # Also check for the specific path mentioned in your error
    app_names = ['Tonhub.app', 'WhalesApp.app']
    xcode_build_dir = ENV['CONFIGURATION_BUILD_DIR']
    if xcode_build_dir
      app_names.each do |app_name|
        hermes_path = "#{xcode_build_dir}/#{app_name}/Frameworks/hermes.framework/hermes"
        strip_bitcode_from_framework(bitcode_strip_path, hermes_path)
      end
    end

    # Add a script phase to strip bitcode from hermes
    installer.pods_project.targets.each do |target|
      if target.name == 'WhalesApp'
        phase = target.new_shell_script_build_phase('Strip Bitcode from Hermes')
        phase.shell_script = <<-SCRIPT
          set -e
          BITCODE_STRIP=$(xcrun -find bitcode_strip)
          find "${BUILT_PRODUCTS_DIR}/${FULL_PRODUCT_NAME}/Frameworks/hermes.framework" -name "hermes" -type f -exec $BITCODE_STRIP -r -o {} {} \\; 2>/dev/null || true
        SCRIPT
        phase.show_env_vars_in_log = '1'
      end
    end
  end

  permissions_path = '../node_modules/react-native-permissions/ios'
  
  pod 'Permission-Camera', :path => "#{permissions_path}/Camera"

  # Optional: exprimental feature
  #
  # post_integrate do |installer|
  #   expo_patch_react_imports!(installer)
  # end
end
